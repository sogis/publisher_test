import java.nio.file.Paths
import java.nio.file.Path
import java.nio.file.Files
import java.io.FileWriter
import java.time.format.DateTimeFormatter

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'ausduennung_juengster_vorletzte_woche','ausduennung_juengster_vorletzter_monat','ausduennung_juengster_vorletztes_jahr','uebergang_woche_monat','uebergang_tag_woche','juengsten_behalten_vorletzte_woche','juengsten_behalten_woche','normal'


def groomPath = new File(file(projectDir).getParentFile(), "publisher_grooming.json")

task ausduennung_juengster_vorletzte_woche(type: Publisher){
// Nur Jüngster innerhalb des vorletzten Monats bleibt erhalten
    doFirst{
        mockThemePubDirs("ausduennung_juengster_vorletzte_woche", [7,8,9,10,11,12,13,14,15]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/ausduennung_juengster_vorletzte_woche")]

    grooming = file("$projectDir/input/ausduennung_juengster_vorletzte_woche.json")
}

task ausduennung_juengster_vorletzter_monat(type: Publisher){
// Nur Jüngster innerhalb des vorletzten Monats bleibt erhalten
    doFirst{
        mockThemePubDirs("ausduennung_juengster_vorletzter_monat", [1,2,29,30,31,32,59,60,61,62,63,89,90,91]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/ausduennung_juengster_vorletzter_monat")]

    grooming = file("$projectDir/input/ausduennung_juengster_vorletzter_monat.json")
}

task ausduennung_juengster_vorletztes_jahr(type: Publisher){
// Nur Jüngster innnerhalb des vorletzten Jahres bleibt erhalten
    doFirst{
        mockThemePubDirs("ausduennung_juengster_vorletztes_jahr", [1,2,364,365,366,729,730,731,1094,1095,1096,]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/ausduennung_juengster_vorletztes_jahr")]

    grooming = file("$projectDir/input/ausduennung_juengster_vorletztes_jahr.json")
}

task uebergang_woche_monat(type: Publisher){
// 6 Wochen weekly, danach monthly
    doFirst{
        mockThemePubDirs("uebergang_woche_monat", [1,2,3,4,10,11,12,17,18,19,24,25,26,31,32,33,38,39,40,44,45,46,52,53,54,59,60,61,66,67,68,73,41,75,104,105,106,134,135,136,164,165,166,302,303,304]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/uebergang_woche_monat")]

    grooming = file("$projectDir/input/uebergang_woche_monat.json")
}

task uebergang_tag_woche(type: Publisher){
// 10 Tage lang Daily / danach Weekly
    doFirst{
        mockThemePubDirs("uebergang_tag_woche", [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,302,303,304]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/uebergang_tag_woche")]

    grooming = file("$projectDir/input/uebergang_tag_woche.json")
}

task juengsten_behalten_vorletzte_woche(type: Publisher){
// von heute bis und mit 8. Tag bleibt bestehen
    doFirst{
        mockThemePubDirs("juengsten_behalten_vorletzte_woche", [1,2,3,4,5,6,7,8,9,10,13,14,15,30,31,32,302,303,304]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/juengsten_behalten_vorletzte_woche")]

    grooming = file("$projectDir/input/juengsten_behalten_vorletzte_woche.json")
}

task juengsten_behalten_woche(type: Publisher){
    doFirst{
        mockThemePubDirs("juengsten_behalten_woche", [1,2,3,4,5,6,7,8,9,15,16,17,22,23,24,29,30,31,32,302,303,304]); 
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/juengsten_behalten_woche")]

    grooming = file("$projectDir/input/juengsten_behalten_woche.json")
}

task normal(type: Publisher){

    doFirst{
        mockThemePubDirs("normal", [1,6,7,30,31,32,302,303,304]); // Generierte "hist-Stände" (Array) muss vieleicht noch angepasst werden, um den Test verifizieren zu können
    }

    dataIdent = "ch.so.awjf.forstreviere.relational"
    userFormats = false

    modelsToPublish = "SO_Forstreviere_20170512"

    sourcePath = file("$projectDir/input/ch.so.awjf.forstreviere.relational.xtf")
    target = [file("$buildDir/normal")]

    grooming = file("$projectDir/input/normal.json")
}

void mockThemePubDirs(String nameOfParentDir, Collection archiveAges){
    mockThemePubDir_(nameOfParentDir, archiveAges);
    mockThemePubDir_(nameOfParentDir + "_before", archiveAges);
}

void mockThemePubDir_(String nameOfParentDir, Collection archiveAges){
    def themePubDir = Paths.get(buildDir.toString(), nameOfParentDir, "ch.so.awjf.forstreviere.relational").toFile();

    // Remove previous themepub dir mocks
    delete(themePubDir.toString())

    // aktuell
    mockDateDir(themePubDir, 0, true)

    // hist
    for(age in archiveAges)
        mockDateDir(themePubDir, age, false)
}

void mockDateDir(File themePubDir, int age, boolean isLatest){
    
    def templateDirName = "datadir_template"
    def zipDataFileName = "ch.so.awjf.forstreviere.relational.xtf.zip"
    
    def dataDir = null;
    def dateString = LocalDate.now().minusDays(age).toString();
    def weekOfYear = LocalDate.now().minusDays(age).format(DateTimeFormatter.ofPattern("yyyy w"));

    // Create empty dir
    if(isLatest)
        dataDir = Paths.get(themePubDir.toString(), "aktuell").toFile();
    else
        dataDir = Paths.get(themePubDir.toString(), "hist", dateString).toFile();

    dataDir.mkdirs();

    logger.info("dataDir: " + dataDir.toString());
    logger.info("date: " + dateString + ". week of year (yyyy w): " + weekOfYear);

    // Copy data to dir
    Files.copy(
        Paths.get(projectDir.toString(), templateDirName, zipDataFileName),
        Paths.get(dataDir.toString(), zipDataFileName)
    )

    // Copy template files into meta subdir
    def metaDirTarget = new File(dataDir, "meta");
    metaDirTarget.mkdir();

    def isFileClosure = { it.toFile().isFile() }
    def copyClosure = { 
        try{
            Files.copy(it, Paths.get(metaDirTarget.toString(), it.getFileName().toString())) 
        }
        catch(Exception e){
            throw new RuntimeException(e)
        }
    }

    Files.walk(Paths.get(projectDir.toString(), "datadir_template", "meta"))
        .filter(isFileClosure)
        .forEach(copyClosure)

    // Create and write publishdate.json to /meta subdir
    def writer = new FileWriter(new File(metaDirTarget, "publishdate.json"))
    def content = '{"publishdate":"' + dateString + '"}'
    writer.write(content, 0, content.length())
    writer.close()
}

